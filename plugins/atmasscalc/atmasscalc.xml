<?xml version="1.0"?>
<plugin xmlns:l="http://github.com/vhotspur/sxmloc">
	<name><l:g>Atomic mass calculator</l:g></name>
	<id>atmasscalc</id>

	<board>
		<div>
			<l:g>Calculate atomic mass of:
				<input type="text" maxlength="18" id="p-atmasscalc-input" />
			</l:g>
		</div>
		<div id="p-atmasscalc-output">
			<i>M<sub>r</sub></i>[<span id="p-atmasscalc-formula" />]
				= <span id="p-atmasscalc-mass" /><br />
		</div>
		<div>
			<span id="p-atmasscalc-mass2" />
		</div>
	</board>
	
	<css>
		#p-atmasscalc-output {
			font-size: 200%;
		}
	</css>
	
	<resume>
		this.recalculate();
	</resume>
	
	<suspend>
	</suspend>

	<init>
		$("#p-atmasscalc-mass").text("0.000");
		$("#p-atmasscalc-input").change($.proxy(this.recalculate, this));
		$("#p-atmasscalc-input").keypress($.proxy(this.recalculate, this));
		$("#p-atmasscalc-input").keydown($.proxy(this.recalculate, this));
		$("#p-atmasscalc-input").keyup($.proxy(this.recalculate, this));
		this.recalculate();
	</init>
	
	<method name="charIsUpper" parameters="c">
		return ((c &gt;= 'A') &amp;&amp; (c &lt;= 'Z'));
	</method>
	<method name="charIsLower" parameters="c">
		return ((c &gt;= 'a') &amp;&amp; (c &lt;= 'z'));
	</method>
	<method name="charIsDigit" parameters="c">
		return ((c &gt;= '0') &amp;&amp; (c &lt;= '9'));
	</method>
	
	<method name="parseFormula" parameters="formula">
		var result = new Array();
		formula = formula + "#";
		var i = 0;
		while (i &lt; formula.length) {
			var c = formula.charAt(i);
			if (c == '#') {
				break;
			}
			if (this.charIsUpper(c)) {
				var smb = c;
				i++;
				while (this.charIsLower(formula.charAt(i))) {
					smb += formula.charAt(i);
					i++;
				}
				var info = this.pte.getElementInfo(smb);
				if (info == 0) {
					continue;
				}
				result[result.length] = new Array(smb, 1);
				continue;
			}
			if (this.charIsDigit(c)) {
				var number = c;
				number++; number--;
				i++;
				while (this.charIsDigit(formula.charAt(i))) {
					var tmp = formula.charAt(i) * 1;
					number = number * 10 + tmp;
					i++;
				}
				if (result.length > 0) {
					result[result.length - 1][1] = number;
				}
				continue;
			}
			i++;
		}
		
		return result;
	</method>
	
	<method name="calculateMass" parameters="formula">
		var i;
		var mass = 0.0;
		for (i = 0; i &lt; formula.length; i++) {
			var info = this.pte.getElementInfo(formula[i][0]);
			if (info == 0) {
				continue;
			}
			mass += info.mass * formula[i][1];
		}
		return mass;
	</method>
	
	<method name="formatMassCalculation" parameters="formula">
		var i;
		var masses = new Array();
		for (i = 0; i &lt; formula.length; i++) {
			var info = this.pte.getElementInfo(formula[i][0]);
			if (info == 0) {
				continue;
			}
			var mass = info.mass;
			mass *= 1.0;
			mass = mass.toFixed(3);
			
			if (formula[i][1] > 1) {
				masses[masses.length]
					= mass + " &amp;middot; "
					+ formula[i][1];
			} else {
				masses[masses.length] = mass;
			}
		}
		return masses.join("&amp;nbsp; + &amp;nbsp;");
	</method>
	
	<method name="formatFormula" parameters="formula">
		var disp = $.map(formula, function(item) {
			var out = item[0];
			if (item[1] &gt; 1) {
				out += "&lt;sub&gt;" + item[1] + "&lt;/sub&gt;";
			}
			return out;
		});
		return disp.join("");
	</method>
	
	<method name="recalculate">
		var formula = $("#p-atmasscalc-input").val();
		var parsed = this.parseFormula(formula);
		
		var formulaFormatted = this.formatFormula(parsed);
		var mass = this.calculateMass(parsed);
		mass = mass.toFixed(3);
		var massCalculation = this.formatMassCalculation(parsed);
		if (massCalculation != "") {
			massCalculation = "(" + massCalculation + ")";
		} else {
			massCalculation = "&amp;nbsp;";
		}
		
		$("#p-atmasscalc-formula").html(formulaFormatted);
		$("#p-atmasscalc-mass").text(mass);
		$("#p-atmasscalc-mass2").html(massCalculation);
	</method>
</plugin>

