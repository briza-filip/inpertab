<?xml version="1.0"?>
<plugin xmlns:l="http://github.com/vhotspur/sxmloc">
	<name><l:g>Atomic mass calculator</l:g></name>
	<id>atmasscalc</id>

	<board>
		<div>
			<l:g>Calculate atomic mass of:
				<input type="text" maxlength="18" id="p-atmasscalc-input" />
			</l:g>
		</div>
		<div id="p-atmasscalc-output">
			<i>M<sub>r</sub></i>[<span id="p-atmasscalc-formula" />]
				= <span id="p-atmasscalc-mass" /><br />
		</div>
		<div>
			<span id="p-atmasscalc-mass2" />
		</div>
	</board>
	
	<css>
		#p-atmasscalc-output {
			font-size: 200%;
		}
	</css>
	
	<resume>
		this.recalculate();
	</resume>
	
	<suspend>
	</suspend>

	<init>
		$("#p-atmasscalc-mass").text("0.000");
		$("#p-atmasscalc-input").change($.proxy(this.recalculate, this));
		$("#p-atmasscalc-input").keypress($.proxy(this.recalculate, this));
		$("#p-atmasscalc-input").keydown($.proxy(this.recalculate, this));
		$("#p-atmasscalc-input").keyup($.proxy(this.recalculate, this));
		this.recalculate();
	</init>
	
	<method name="calculateMass" parameters="formula">
		var i;
		var mass = 0.0;
		for (i = 0; i &lt; formula.length; i++) {
			var m;
			if (formula[i][0] == 0) {
				var info = this.pte.getElementInfo(formula[i][1]);
				if (info == 0) {
					continue;
				}
				this.pte.highlightElement(info);
				m = info.mass;
			} else {
				m = this.calculateMass(formula[i][1]);
			}
			
			mass += m * formula[i][2];
		}
		return mass;
	</method>
	
	<method name="formatMassCalculation" parameters="formula">
		var i;
		var masses = new Array();
		for (i = 0; i &lt; formula.length; i++) {
			var mass;
			var count = formula[i][2];
			if (formula[i][0] == 0) {
				var info = this.pte.getElementInfo(formula[i][1]);
				if (info == 0) {
					continue;
				}
				mass = info.mass;
				mass *= 1.0;
				mass = mass.toFixed(3);
			} else {
				mass = this.formatMassCalculation(formula[i][1]);
				if (count > 1) {
					mass = "(" + mass + ")";
				}
			}
			
			if (count &gt; 1) {
				masses[masses.length]
					= mass + " &amp;middot; "
					+ count;
			} else {
				masses[masses.length] = mass;
			}
		}
		return masses.join("&amp;nbsp; + &amp;nbsp;");
	</method>
	
	<method name="formatFormula" parameters="formula">
		var i;
		var result = "";
		for (i = 0; i &lt; formula.length; i++) {
			var out;
			var count = formula[i][2];
			if (formula[i][0] == 0) {
				out = formula[i][1];
			} else {
				out = this.formatFormula(formula[i][1]);
				if (count &gt; 1) {
					out = "(" + out + ")";
				}
			}
			if (count &gt; 1) {
				out += "&lt;sub&gt;" + count + "&lt;/sub&gt;";
			}
			result += out;
		}
		return result;
	</method>
	
	<method name="recalculate">
		this.pte.clearHighlighting();
		var f = $("#p-atmasscalc-input").val();
		var formula = new ChemicalFormula(this.pte, f);
		
		var parsed = formula.getFormula();
		
		var formulaFormatted = this.formatFormula(parsed);
		var mass = this.calculateMass(parsed);
		mass *= 1.0;
		mass = mass.toFixed(3);
		var massCalculation = this.formatMassCalculation(parsed);
		if (massCalculation != "") {
			massCalculation = "[" + massCalculation + "]";
		} else {
			massCalculation = "&amp;nbsp;";
		}
		
		$("#p-atmasscalc-formula").html(formulaFormatted);
		$("#p-atmasscalc-mass").text(mass);
		$("#p-atmasscalc-mass2").html(massCalculation);
	</method>
</plugin>

